"""信号量控制线程数量"""
import threading,time

sem = threading.Semaphore(2)

def run():
    with sem:
        for i in range(6):
            print("%s--%d"%(threading.current_thread().name,i))
            time.sleep(1)



if __name__ == "__main__":
    for i in range(5):
        threading.Thread(target=run).start()
        
        
"""凑够一定数量才能一起执行"""
import threading,time

bar = threading.Barrier(3)

def run():
    print("%s--start"%(threading.current_thread().name))
    time.sleep(1)
    bar.wait()
    print("%s--end"%(threading.current_thread().name))

if __name__ == "__main__":
    for i in range(5):
        threading.Thread(target=run).start()


"""定时线程"""
import threading,time


def run():
    print("sunck is good man")
    time.sleep(1)

#过5秒钟延迟执行线程
t = threading.Timer(5,run)
t.start()
t.join()
print("父线程结束")



"""线程通讯"""

import threading,time

def func():
    # 事件对象
    event = threading.Event()
    def run():
        for i in range(5):
            # 阻塞，等待事件的触发
            event.wait()
            #重置事件,如果不重置下次不会阻塞
            event.clear()
            print("sunck is a good man!%d"%i)
    t = threading.Thread(target=run).start()
    return event

e = func()

# 触发事件
for i in range(5):
    e.set()
    time.sleep(1)
    
    
"""生产者与消费者"""

import threading,time,queue,random


#生产者
def product(id,q):
    while True:
        num = random.randint(0,1000)
        q.put(num)
        print("生产者%d生产了%d数据放入了队列"%(id,num))
        time.sleep(2)
    # 任务完成
    q.task_done()

#消费者
def customer(id,q ):
    while True:
        item = q.get()
        if item is None:
            break
        print("消费者%d消费了%d数据"%(id,item))
        time.sleep(2)
    # 任务完成
    q.task_done()

if __name__ == "__main__":
    #消息队列
    q = queue.Queue()

    #启动生产者
    for i in range(4):
        threading.Thread(target=product,args=(i,q)).start()

    #启动消费者
    for i in range(3):
        threading.Thread(target=customer,args=(i,q)).start()

        
