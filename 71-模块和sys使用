
"""
71-模块概述:
目前代码比较少，写在一个文件中还体现不出什么缺点，但是随着代码量越来越多，代码就越来越多难以维护，
为了解决难以维护的问题。我们把很多相似功能的函数分组，分别放到不同的文件中取。这样每个文件所包含的内容
相对较少，而且对于每一个文件的大致功能可用用文件名来体现。现在编程语言都是这么来组织代码结构。一个.py
文件就是一个模块，

有点：
1.提高代码的可维护性
2.提高了代码的复用度，当一个模块完毕，可以被多个地方引用
3.引用其它的模块（内置模块和三个模块和自定义模块）
4.避免函数名与变量名的冲突

# 引入内置模块
import sys,time,datetime,os

print(sys.argv)

#获取黑屏终端命令行后参数的列表
for i in sys.argv:
    print(i)

name=sys.argv[1]
age=sys.argv[2]
hody=sys.argv[3]

print(name,age,hody)

#自动查找所需模块的列表路径
print(sys.path)


# 引入自定义模块
# import 语句
# 格式：import module1[,module2,module3,module4,....]

# 使用sunck内容需要引入
#注意：引入自定义模块，不用加.py后缀,一个模块只会被引入一次，不管你执行了
# 多次import ，防止模块被多次引入
import sunck

# 使用模块中的内容
# 格式：模块名.函数名/变量名
sunck.sayGood()
# 结果：sunck is good main

print(sunck.tt)
# 结果:1000


#from .... import 语句
# 作用：从模块中导入一个指定的部分到当前命名空间
# 格式：from module import name1[,name2,....]

from sunck import sayNice


程序内容的函数可以将模块中的同名函数覆盖
def sayNice():
    print('*******')    

sayNice()
 # 结果：sunck is a nice man


#from .... import *语句
# 作用：把一个模块中所有内容全部导入当前命名空间
# 格式：from module import *

from sunck import *
# 注意：不建议过多使用此种方式引入

"""

# __name__属性：
# 模块就是一个可执行的.py文件，一个模块被另一个程序引入，我不想让模块中的某些代码执行，可以
# 用__name__属性来使用程序仅调用模块中的一部份


# from sunck import *,此方式会自动执行print
# 每一个模块都有一个__name__属性,当其值等于"__main__"时，表时该模块自身在执行,
# 当前文件如果为程序为程序的入口文件，则__name__属性的值为__main__

