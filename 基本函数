"""
认识函数：在一个完整的项目中，某些功能会反复的使用，那么，会将功能封装成函数
当要使用功能的时候，直接调用函数。

本质：函数就是对功能的封装

优点：
1.简化代码结构，增加代码的复用度（重复使用的程度）。
2.修改某些功能或者调试某个BUG，只需修改对应的函数
"""
"""
格式：
def 函数名（参数1，参数2，...）：
    语句
    return  表达式
def:函数代码以def关键字开始
函数名：遵循标识符规则
（）：参数列表开始与结束
参数列表：任何传入函数的参数和变量必须放在圆括号之间，用逗号分隔，函数从函数的调用者获取信息
冒号：函数内容以冒号开始，并且缩进
语句：函数封装的功能
return:结束函数，并返回信息给函数的调用者
表达式：返回给函数调用者的信息
注意：最后的return可以不写，相当于return None
"""

"""
参数传递分为两种：
值传递：传递的不可变类型
string,tuple,number是不可变的
"""
def func(num):
    num=10
temp=20
func(temp)
print(temp)
# 结果：20

"""
引用传递：传递的是可变类型
list,dict,set是可变的
"""
def func2(list):
    list[0]=100

list1=[1,2,3,4,5]
func2(list1)
print(list1)
# 结果：[100, 2, 3, 4, 5]
# 如果是用深拷贝传递就不会改变
list2=[6,7,8,9,10]
func2(list2.copy())
print(list2)
# 结果：[6, 7, 8, 9, 10]


a=10
b=10
print(id(a),id(b))
# 结果：8791042544960 8791042544960

c=20
d=30
print(id(c),id(d))
# 结果：8791042545280 8791042545600
c=d
print(id(c),id(d))
# 结果：8791042545600 8791042545600

"""
关键字参数：允许函数调用时的参数顺序不一致
"""

def myPrint(str,age):
    print(str,age)

myPrint(age=18,str="ok")
# 结果：ok 18

"""
默认参数：调用函数时如果没有传递参数，则使用默认参数
注意：使用默认参数，最好将默认参数放到最后
"""

# def myPrint1(str="cc",age):
#     print(str,age)
#
# myPrint1(18)
# 结果：报错，因为默认参数在前面，系统自动匹配第一个并传递，但是后面没有传递参数

def myPrint1(str="cc",age=17):
    print(str,age)

myPrint1("bb")
# 结果：bb 17


"""
不定长参数：能处理比定义时更多的参数
加了星号(*)的变量存放所有未命名的变量参数，如果在函数调用时没有指定参数，它就是一个空元组
"""
def func3(name,*args):
    print(name)
    print(args)
    print(type(args))
    for x in args:
        print(x)

func3("om","bu","kk")
# 结果：
# om
# ('bu', 'kk')
# <class 'tuple'>
# bu
# kk

# 只能传关键字参数即键值对，**代表键值对的参数字典
def func5(**kwargs):
    print(kwargs)
    print(type(kwargs))

func5(x=1,y=2)
# 结果：
# {'x': 1, 'y': 2}
# <class 'dict'>
