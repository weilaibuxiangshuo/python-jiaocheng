"""
什么是面向对象：
把数据与数据的操作方法放在一起，作为一个整体就是对象
对同类对象抽象出其共性，形成类。
类中的大多数据，只能用本类的方法进行处理
类通达一个简单的外部接口与外界发生关系，使用消息进行通信
程序流程由用户在使用中决定
"""
"""
设计类：
类名：见名之意，首字母大写，其它遵循驼峰原则
属性：见名之意，其它遵循驼峰原则
行为（方法/功能）:见名之意，其它遵循驼峰原则
创建类：
类：一种数据类型，本身并不占内存空间，根据学过的number,string,boolean等类似。用类创建实例化对象（变量）
对象占内存空间
格式：
class 类名(父类列表):
    属性
    行为

# object 基类，超类，所有类的父类
class Person(object):
    # 定义属性
    name=""
    age=0
    height=0
    weight=0
    
    # 定义方法（定义函数）
    # 注意：方法的参数必须以self当第一个参数
    # self代表类的实例（某个对象）
    def run(self):
        print("run")
    def eat(self,food):
        print("eat"+food)

# 使用类实例化对象

class Person(object):
    name = ""
    age = 0
    height = 0
    weight = 0

    def run(self):
        print("run")

    def eat(self, food):
        print("eat" + food)

# 实例化对象
# 格式：对象名 = 类名（参数列表）
# 注意：没有参数，小括号也不能省略

per1 = Person()
print(per1)
print(id(per1))
# 结果：
# 41529920
# <__main__.Person object at 0x000000000274B048>

per2 = Person()
print(per2)
print(id(per2))
# 结果：
# 41529976
# <__main__.Person object at 0x0000000001E9B2B0>
# 注意：这两个对象内存地址不一样，是两个不同的对象

class Person(object):
    name = ""
    age = 0
    height = 0
    weight = 0

    def run(self):
        print("run")
    def eat(self, food):
        print("eat：" + food)
    def openDoor(self):
        print("测试这个类方法调用")

    def __init__(self):
        print("这里是init")
        pass

# 访问属性
# 格式：对象名.属性名
# 赋值：对象名.属性名 = 新值
per=Person()
per.name="tom"
per.age=18
per.height=100
per.weight=60
print(per.name,per.age,per.height,per.weight)
# 结果：tom 18 100 60

# 访问方法
# 格式：对象名.方法名(参数列表)
per.eat("苹果")
# 结果：eat：苹果

# 问题：person创建的所有对象属性都是一样的
per2=Person()
print(per2.age)
per3=Person()
print(per3.age)
# 结果：
# 0
# 0


class Person(object):
    def run(self):
        print("run")
    def eat(self, food):
        print("eat：" + food)
    def openDoor(self):
        print("测试这个类方法调用")

    def __init__(self,name,age,heigth,weight):
        # print("这里是init")
        self.name=name
        self.age=age
        self.heigth=heigth
        self.weight=weight

# 构造函数：__init__()在使用类创建对象的时候自动调用
# 注意：如果不显示的写出来构造函数，默认会自动添加一个空的构造函数
# per3=Person()或者Person()
# 结果：这里是init

per5=Person('hanmemei',20,170,55)
print(per5.name)
# 结果：hanmemei
per6=Person('lili',18,77,33)
print(per6.name)
# 结果：lili


# self代表类的实例，而不是类
# 那个对象调用方法，那么该方法中的self就代表那个对象
# self.__class__ 代表类名

class Person(object):
    def run(self):
        print(self.__class__)
        p=self.__class__("pite",80,100,60)
        print(p.name)
        print("run")
    def eat(self, food):
        print("eat：" + food)
    def say(self):
        print("hello my name is %s,I am %d years old"%(self.name,self.age))
    def openDoor(self):
        print("测试这个类方法调用")

    def __init__(self,name,age,heigth,weight):
        self.name=name
        self.age=age
        self.heigth=heigth
        self.weight=weight

per6=Person("tom",20,160,80)
per6.say()
# 结果：hello my name is tom,I am 20 years old

per6.run()
# 结果：
# <class '__main__.Person'>
# pite
# run

"""
  
