"""
windows基本命令
1.启动服务：
    说明：以管理员身份运行cmd
    格式：net start 服务名称
    示例：net start mysql57

2.停止服务：
    说明：以管理员身份运行cmd
    格式：net stop 服务名称
    示例：net stop mysql57

3.连接数据库
    格式：mysql -u 用户名 -p
    示例：mysql -u root -p
    输入密码（安装时设置的）

4.退出登陆
    quit或exit

5.查看版本（连接后执行）
    示例：select version();

6.显示当前时间（连接后执行）
    示例：select now();

7.远程连接
    格式：mysql -h IP地址 -u 用户名 -p
    输入密码

二、数据库操作
1.创建数据库
    格式：create database 数据库名  charset=utf8;
    示例：create database sunck  charset=utf8;
2.删除数据库
    格式：drop database 数据库名;
    示例：drop database sunck;
3.切换数据库
    格式：use 数据库名;
    示例：use sunck;
4.查看当前使用的数据库
    select database();

三、表操作
1.查看当前数据库中所有表
    示例：show tables;
2.创建表
    格式：create table 表名(列及类型);
    说明：
    auto_increment  表明自增长
    primary key 主键
    not null 不为空
    default  默认
    bit 布尔型  0为假  1为真
    示例：create table student(id int auto_increment primary key,name varchar(20) not null
    ,age int not null,gender bit default 1 ,address varchar(20),isDelete bit default 0);

    create table newcar (id int auto_increment primary key,name varchar(20) not null,color varchar(20),maxSpead int(240));

3.删除表
    格式：drop table 表名;
    示例：drop table student;
4.查看表结构
    格式：desc 表名;
    示例：desc student;
5.查看建表语句
    格式：show create table 表名;
    示例：show create table student;
6.重命名表名
    格式：rename table 原表名 to 新表名;
    示例：rename table car to newcar;
7.修改表
    新建表：
        格式:alter table 表名 add 列名 类型
        示例:alter table newcar add  isDelete bit default 0;
    修改表列名跟类型：
        格式:alter table 表名 change 原列名 新列名 类型
        示例:alter table newcar change  isDelete isdelete varchar(30);
    修改表类型：
        格式:alter table 表名 modify 列名 类型
        示例:alter table newcar modify  isDelete  varchar(30);

四、数据操作
1.增
    a、全列插入(只能插一条)
        格式：insert into 表名 values();
        说明：主键列是自动增长，但是全列插入时需要占位，通常使用数字0点位，插入成功后以实际数据为准
        示例：insert into student values(0,"tom",19,1,"北京",0);
    b、缺省插入(只能插一条)
        格式：insert into 表名 (列1,列2,.....) values(值1，值2,....);
        示例：insert into student (name,age,address) values("lilei",19,"上海");
    c、同时插入多条数据
        格式：insert into 表名 values(...),(...),...;
        示例：insert into student values(0,"hanmei",19,0,"北京",0),(0,"小李",22,1,"重庆",0),(0,"小丽",21,1,"上海",0);

2.删
    a.全部删除
        格式：delete from 表名;
        示例：delete from student;
    b.条件删除
        格式：delete from 表名 where 条件;
        示例：delete from student where id = 4;

3.改
    a.全部修改
        格式：update 表名 set 列1=值1，列2=值2，.....;
        示例：update 表名 set 列1=值1，列2=值2，.....;
    b.条件修改
        格式：update 表名 set 列1=值1，列2=值2，.....  where id =4;
        示例：update 表名 set 列1=值1，列2=值2，....   where id =4;

4.查
    a.基本语法
        格式：select  * from 表名;
        说明：1.from 关键字后面是表名,表示数据来源于那张表
             2.select 后面写表中的列名,如果是*表示在结果集中显示表中的所有列
             3.在select 后面的列名部分可以使用as为列名起别名,别名显示在结果集中
             4.如果要查询多个列,之间使用逗号分隔
        示例：
            全部：
            select * from student;
            按列查询
            select name,age  from student;
            按列查询并指定别名
            select name as n ,aget from student;
    b.消除重复行
        在select 后面列前面使用distinct 可以消除重复的行
        示例：select distinct  gender from student;
    c.条件查询
        1.语法
            select * from 表名 where 条件
        2.比较运算符
            等于  =
            大于  >
            小于  <
            大于等于    >=
            小于等于    <=
            不等于   !=或<>
            需求：查询id值大于8的所有数据
            示例：select * from student where id >8;
        3.逻辑运算符
            and 并且
            or 或者
            not 非
            需求：查询id的值大于7的女同学
            示例：select * from student where id > 7 and gender = 0;
        4.模糊查询
            like
            %   表示任意多个任意字符
            _   表示一个任意字符

            格式：
                多个任意字符匹配
                1.select * from 表名 where 列名 like  "li%";
                单个字符匹配
                2.select * from 表名 where 列名 like  "li_";
            需求：查询姓lilei的同学
            示例：select * from student where name like  "li%";

        5.范围查询
            in  表示一个非连续的范围内
            between...and...    表示一个连续的范围内
            需求：查询编号为1,3,5的学生
            示例：select * from student where id in (1,3,5);
            需求：查询编号为1到6的学生
            示例：select * from student where id between 1 and 6;

        6.空判断
            注意：null与""是不同
            判断空：is null
            判断非空：is not null
            需求：查询没有地址的同学
            示例：select * from student where address is null;

        7.优先级
            小括号，not 比较运算符,逻辑运算符,
            and 比 or 优先级高， 如果同时出现并希望先选or,需要结合()来使用

    d.聚合
        为了快速得到统计数据，提供了5个聚合函数
        1.count(*)  表示计算总行数,括号中*可以写*和列名
        2.max(列)    表示求此列的最大值
        3.min(列）    表示求此列的最小值
        4.sum(列）    表示此列的和
        5.avg(列)    表示此列的平均值
        需求：查询学生总数
        示例：select count(*) from student;
        需求：查询女生的编号最大值
        示例：select max(id) from student where gender=0;
        需求：查询女生的编号最小值
        示例：select min(id) from student where gender=0;
        需求：查询女生的所有年龄和
        示例：select sum(age) from student where gender=0;
        需求：查询女生的所有年龄平均值
        示例：select avg(age) from student where gender=0;
    e.分组
        按照字段分组，表示此字段相同的数据会被放到一个集合,分组后，只能查询出相同的数据链
        对于有差异的数据链无法显示结果集中，可以对分组后的数据进行统计，做聚合运算
        格式：select 列1,列2,聚合...from 表名 group by 列1,列2,...;
        需求：查询男女生总数
        示例：select gender,count(*) from student group by gender;

        分组后的数据筛选:select 列1,列2,聚合...from 表名 group by 列1,列2,... having 列1条件,列2条件,...;
        示例：select gender,count(*) from student group by gender having gender=1;

        where与having的区别：
        where是对from后面指定表进行筛选，属于对原始数据筛选
        having是对group by的结果中进行筛选

    f.排序
        格式：select * from 表名 order by 列1 asc|desc, 列2 asc|desc,...
        说明：
            1.将数据按照列1进行排序，如果某些列1的值相同则按照列2进行排序，以此类推
            2.默认是按照从小到大的顺序排序
            3.asc升序
            4.desc降序
        需求：按没有被删除的数据按年龄排序
        示例：select * from student where isdelete = 0 order by age asc;
        需求：按没有被删除的数据按年龄升序排序,再按id升序排序
        示例：select * from student where isdelete = 0 order by age asc, id asc;
    g.分页
        格式：select * from  表名 limit start,count;
        说明：start 索引从0开始
        示例：
            select * from student limit 0,3;
            select * from student limit 3,3;
            select * from student where gender=1 limit 0,3;

五、关联
    建表语句：
        1.create table class(id int auto_increment primary key,name varchar(20) not null,stuNum int not null);
        2.create table students(id int auto_increment primary key ,name varchar(20) not null,gender tinyint default 1,classid int not null,foreign key(classid) references class(id));

        插入一些数据：
            insert into class values(0,"python01",55),(0,"python02",50),(0,"python03",60),(0,"python04",80);
            insert into students values(0,"tom",1,1);
            insert into students values(0,"jack",1,2);

            关联查询:(inner join关联)
            select students.name,class.name from class inner join students on class.id=students.id;
            select students.name,class.name from class left join students on class.id=students.id;
            select students.name,class.name from class right join students on class.id=students.id;

        分类：
            1.表A inner join 表B
                表a与表b匹配的行会出现在结果集中
            2.表A left join 表B
                表a与表b匹配的行会出现在结果集中，外加表a中独有的数据，未对应的数据使用null填充
            3.表A right join 表B
                表a与表b匹配的行会出现在结果集中，外加表b中独有的数据，未对应的数据使用null填充

举例：
关系表如下：查询学生id为1的班级名称(注意where 条件一定要放最后，否则会报错)
"""
('id', 'int(11)', 'NO', 'PRI', None, 'auto_increment')
('name', 'varchar(20)', 'NO', '', None, '')
('gender', 'tinyint(4)', 'YES', '', '1', '')
('classid', 'int(11)', 'NO', 'MUL', None, '')

(1, 'tom', 1, 1)
(2, 'jack', 1, 2)

('id', 'int(11)', 'NO', 'PRI', None, 'auto_increment')
('name', 'varchar(20)', 'NO', '', None, '')
('stuNum', 'int(11)', 'NO', '', None, '')

(1, 'python01', 55)
(2, 'python02', 50)
(3, 'python03', 60)
(4, 'python04', 80)
"""
执行如下：
select c.name from students s inner join class c on s.classid = c.id  where s.id = 2


"""
