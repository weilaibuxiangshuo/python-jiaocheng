"""
50 异常处理

try.....except.....else
格式：
try:
    语句t
except 错误码 as e:
    语句1
except 错误码 as e:
    语句2
......
except 错误码 as e:
    语句n
    
else:
    语句e
    
注意：else语句可有可无
作用：用来检测try语句块中错误，让except语句捕获错误信息并处理
逻辑：当程序执行到try-except-else语句时
1.如果当try语句t执行出现错误，会匹配第一个错误码，如果匹配上就执行对应的"语句"。
2.如果"try"语句t执行没有错误，没有匹配的异常，错误将会被提交到上一层try语句。或者到程序的最上层
3.如果"try"语句t执行没有错误，如果有指定else会执行else语句

"""

try:
    print(3 / 0)
    # print(num)
except NameError as e:
    print("没有该变量")
except ZeroDivisionError as e:
    print("除数为0了")

print("*********")
# 结果：
# 除数为0了
# *********

#使用except而不使用任何的错误类型
try:
    print(4/0)
except:
    print("程序出现了异常")

#使用except带着多种异常
try:
    # print(4/0)
    print(num)
except (NameError,ZeroDivisionError):
    print("出现NameError或者ZeroDivisionError错误")

#特殊
# 1.错误其它是class(类),所有的错误都继承自BaseException,所以，在捕获的时候,
# 它捕获了该类型的错误，还把子类一起捕获
try:
    print(5/0)
except BaseException as e:
    print("异常1")
except ZeroDivisionError as e:
    print("异常2")
# 结果：异常1

# 2.跨越多层调用,main调用了func2,func2调用了func1，func1出现了错误，只要main捕获到了
# 就可以处理
def func1(num):
    print(1/num)
def func2(num):
    func1(num)
def main():
    func2(0)

try:
    main()
except ZeroDivisionError as e:
    print("*****")

"""
try.....except.....finally
格式：
try:
    语句t
except 错误码 as e:
    语句1
except 错误码 as e:
    语句2
......
except 错误码 as e:
    语句n
    
finally:
    语句f
    
作用：语句t无论是否有错误都会执行最后的语句f
"""

try:
    print(1/0)
except ZeroDivisionError as e:
    print("为0了")
finally:
    print("必须执行我")

#断言
def func5(num,div):
    assert (div !=0),"div 不能为0"
    return num/div

print(func5(10,0))
# 结果：
# AssertionError: div 不能为0
