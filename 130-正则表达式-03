import re

"""
字符串切割
"""
# 比split好用
str1 = "sunck###is#a#good#man"
print(str1.split("#"))
print(re.split(r"#+", str1))
# 结果：
# ['sunck', '', '', 'is', 'a', 'good', 'man']
# ['sunck', 'is', 'a', 'good', 'man']

"""
re.finditer函数
原型：finditer(pattern,string,flags=0)
参数：
pattern:匹配的正则表达式
string:要匹配的字符串
flages:标志位，用于控制正则表达式的匹配方式 
功能：与findall类似，扫描整个字符串，返回是一个迭代器
"""

str2 = "sunck is a good man! sunck is nice man!sunck is a handsome man"

d = re.finditer(r"sunck", str2)
while True:
    try:
        m = next(d)
        print(m)
    except StopIteration as e:
        break

# 结果：
# <re.Match object; span=(0, 5), match='sunck'>
# <re.Match object; span=(21, 26), match='sunck'>
# <re.Match object; span=(39, 44), match='sunck'>

"""
字符串的替换和修改
sub(pattern,rep1,string,count=0,flags=0)
subn(pattern,rep1,string,count=0,flags=0)
pattern:  正则表达式（规则）
repl:    指定的用来替换的字符串
string:   目标字符串
count:   最多替换次数
flags:   标志位，用于控制正则表达式的匹配方式 （像re.I,re.M之类）
功能：在目标字符串以正则表达式的规则匹配字符串，再把他们替换指字符串
可以指定替换的次数，如果不指定，会替换所有匹配字符串
# 前者返回一个被替换的字符串，
# 后者返回一个元组，第一个元素被替换的字符串，第二个元素表示被替换的次数
"""

str5="sunck is a good good good man"
# print(re.sub(r"good","nice",str5))  #加括号代表一个整体
print(re.sub(r"(good)","nice",str5))
print(re.sub(r"(good)","nice",str5,count=2))
print(type(re.sub(r"(good)","nice",str5,count=2)))
# 结果：
# sunck is a nice nice nice man
# sunck is a nice nice good man
# <class 'str'>

print(re.subn(r"(good)","nice",str5))
print(type(re.subn(r"(good)","nice",str5)))
# 结果：
# ('sunck is a nice nice nice man', 3)
# <class 'tuple'>

# re.sub()
# re.subn()
# 前者返回一个被替换的字符串，
# 后者返回一个元组，第一个元素被替换的字符串，第二个元素表示被替换的次数

"""
分组：
除了简单的判断是否匹配之处，正则表示式还有提取子串的功能，用()表示
就是提取分组
"""
str7 = "sunck is a good man!sunck is a nice man! sunck is a handsome man"
str6 = "010-53247654"
m = re.match(r"((?P<first>\d{3})-(?P<last>\d{8}))",str6)
# 使用序号获取对应组的信息，group(0)一直代表的原始字符串
print(m.group(0))
print(m.group(1))
# ?P<first> 给组取名?加大写P再加<>
print(m.group("first"))
print(m.group(2))
# 查看匹配各组的情况
print(m.groups())

"""
编译：当我们使用正则表达式时，re模块会做两件事
1.编译正则表达式，如果正则表达式本身不合法，会报错
2.用编译后的正则表达式去匹配对象
compile(pattern,flags=0)
pattern:要编译的正则表达式

"""

pat = r"^1(([3578]\d)|(47))\d{8}$"
print(re.match(pat,"13600000000"))
# kk=re.match(pat,"13600000000")
# print(kk.groups())
# 编译成正则对象
re_telephon = re.compile(pat)
print(re_telephon.match("13600000000"))

# re模块调用
# re.match(pattern,string,flags=0)
# re对象调用

# re_telephon.match(string)
# re.search()
# re.findall()
# re.split()
# re.finditer()
# re.sub()
# re.subn()


