# 42 函数基础05-1
# 迭代器
"""
可迭代对象：可以直接作用于for循环的对象统称为可迭代对象(iterable).
可以用isinstance()去判断一个对象是否是object以象

可以直接作用于for的数据类型一般分两种：
1.集合数据类型，如list,tuple,dict,set,string
2.是generator，包括生成器和带yield的generator function
"""
# Iterable是可迭代对象并不是迭代器
from collections import Iterable,Iterator
print(isinstance([],Iterable)) #True
print(isinstance({},Iterable)) #True
print(isinstance((),Iterable)) #True
print(isinstance("",Iterable)) #True
print(isinstance((x for x in range(10)),Iterable)) #True
print(isinstance(1,Iterable)) #False

"""
迭代器：不但可以作用于for循环，还可以被next()函数不断调用并返回下一个值，
直到最后抛出一个StopIteration错误，表示无法继续返回下一个值。

可以被next()函数调用并不断返回下一个值的对象称为迭代器（iterator对象）
可以使用isinstance()函数判断一个对象是否是iterator对象
"""
print(isinstance([],Iterator)) #False
print(isinstance({},Iterator)) #False
print(isinstance((),Iterator)) #False
print(isinstance("",Iterator)) #False
print(isinstance((x for x in range(10)),Iterator)) #True

l=(x for x in range(3))
print(next(l))
print(next(l))
print(next(l))
# print(next(l)) 到这超了，所以报错

# 转成Iterator对象
a=iter([1,2,3,4,5])
print(next(a))
print(next(a))
print(next(a))
print(next(a))
print(next(a))
print(isinstance(iter([]),Iterator))  #True
print(isinstance(iter({}),Iterator))  #True
print(isinstance(iter(()),Iterator))  #True
print(isinstance(iter(""),Iterator))  #True

# 例子
endstr="end"
str=""
for line in iter(input,endstr):
    str += line + "\n"

print(str)
