#格式：[start:end:step]
"""
其中，第一个数字start表示切片开始位置，默认为0
第二个数字end表示切片截止（但不包含位置）默认为列表长度
第三个数字step表示切片的步长（默认为1）
当start为0时可以省略，当end为列表长度时可以省略
当step为1时可以省略，并且省略步长时可以同时省略最后一个冒号
另外，当step为负整数时，表示反向切片，这时start应该比end的值要大才行
"""

list = [3,4,5,67,8,9,12,99,17]
print(list[6:1:-1])  #结果：[12, 9, 8, 67, 5] 返回下标6到2的值，不包含1，所以到下标2，
print(list[1:6:-1])  #结果：[]  当step为负整数时，表示反向切片，start应比end的值要大才行，否则返回空列表
print(list[::])      #结果：[3, 4, 5, 67, 8, 9, 12, 99, 17] 返回包含原列表中所有元素的新列表
print(list[::-1])      #结果：[17, 99, 12, 9, 8, 67, 5, 4, 3] 返回包含原列表中所有元素的逆序新列表
print(list[::2])      #结果：[3, 5, 8, 12, 17] 隔一个取一个，获取偶数位置的元素
print(list[1::2])      #结果：[4, 67, 9, 99] 隔一个取一个，获取奇数位置的元素
print(list[3:6])      #结果：[67, 8, 9] 指定切片的开始和结束位置，不包含下标为结束位置的元素
print(list[0:100])      #结果：[3, 4, 5, 67, 8, 9, 12, 99, 17] 切片结束位置大于列表长度时，从列表尾部截断
print(list[100:])      #结果：[] 切片开始位置大于列表长度时，返回空列表

list[len(list):]=[111]
print(list) #在列表尾部增加元素
#结果：[3, 4, 5, 67, 8, 9, 12, 99, 17, 111]

list[:0]=[66,77]
print(list) #在列表头部插入元素
#结果：[66, 77, 3, 4, 5, 67, 8, 9, 12, 99, 17, 111]

list[3:3]=[88]
print(list) #在列表中间插入元素
#结果：[66, 77, 3, 88, 4, 5, 67, 8, 9, 12, 99, 17, 111]

list[:3]=[1,2,3]
print(list) #替换列表元素，等号两边的列表长度相等，会替换相等元素
#结果：[1, 2, 3, 88, 4, 5, 67, 8, 9, 12, 99, 17, 111]

list[3:]=["a","b"]
print(list) #替换列表元素，等号也可不相等，会把所有都替换
#结果：[1, 2, 3, 'a', 'b']

list[::2]=[0]*3
print(list) #隔一个替换一个,如果超出列表的元素个数或少于对应个数，会报错
#结果：[0, 2, 0, 'a', 0]

list[::2]=["h","m","n"]
print(list) #隔一个替换一个,如果超出列表的元素个数或少于对应个数，会报错
#结果：['h', 2, 'm', 'a', 'n']

# list[::2]=["h","m"]
# print(list) #隔一个替换一个,如果超出列表的元素个数或少于对应个数，会报错
#结果：报错

list[:2]=[]
print(list) #删除列表中的2个元素，不包含结束下标的元素
#结果：['m', 'a', 'n']


#实现对象切片
# -*- coding:utf-8 -*-

class Group:
    #支持切片操作
    def __init__(self,group_name,company_name,staffs):
        self.group_name = group_name
        self.company_name = company_name
        self.staffs = staffs
    #反序列
    def __reversed__(self):
        # return self.staffs[::-1] #跟下面都一样可以实现
        self.staffs.reverse()

    #切片
    def __getitem__(self, item):
        # return self.staffs[item] #这样返回是list，不是对象Group
        import numbers
        print(self,"===") #<__main__.Group object at 0x0000021AAF642EF0>
        cls = type(self)
        print(cls,"---") #<class '__main__.Group'>
        if isinstance(item,slice):
            return cls(group_name=self.group_name,company_name=self.company_name,staffs=self.staffs[item])
        elif isinstance(item,numbers.Integral):
            return cls(group_name=self.group_name,company_name=self.company_name,staffs=[self.staffs[item]])


    #取长度
    def __len__(self):
        return len(self.staffs)
    #可迭代
    def __iter__(self):
        return iter(self.staffs)
    #是否包含
    def __contains__(self, item):
        if item in self.staffs:
            return True
        else:
            return False

staffs = ["boddy1","Tome","lilly","buleT","Jsone"]
group = Group(company_name="imooc",group_name="user",staffs=staffs)
sub_group = group[:2]
# sub_group = group[0]
print(sub_group)
print(reversed(group))
print(group.staffs)

结果：
<__main__.Group object at 0x0000027CF3F22EF0> ===
<class '__main__.Group'> ---
<__main__.Group object at 0x0000027CF3F22F98>
None
['Jsone', 'buleT', 'lilly', 'Tome', 'boddy1']
