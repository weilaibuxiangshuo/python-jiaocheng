#格式：[start:end:step]
"""
其中，第一个数字start表示切片开始位置，默认为0
第二个数字end表示切片截止（但不包含位置）默认为列表长度
第三个数字step表示切片的步长（默认为1）
当start为0时可以省略，当end为列表长度时可以省略
当step为1时可以省略，并且省略步长时可以同时省略最后一个冒号
另外，当step为负整数时，表示反向切片，这时start应该比end的值要大才行
"""

list = [3,4,5,67,8,9,12,99,17]
print(list[6:1:-1])  #结果：[12, 9, 8, 67, 5] 返回下标6到2的值，不包含1，所以到下标2，
print(list[1:6:-1])  #结果：[]  当step为负整数时，表示反向切片，start应比end的值要大才行，否则返回空列表
print(list[::])      #结果：[3, 4, 5, 67, 8, 9, 12, 99, 17] 返回包含原列表中所有元素的新列表
print(list[::-1])      #结果：[17, 99, 12, 9, 8, 67, 5, 4, 3] 返回包含原列表中所有元素的逆序新列表
print(list[::2])      #结果：[3, 5, 8, 12, 17] 隔一个取一个，获取偶数位置的元素
print(list[1::2])      #结果：[4, 67, 9, 99] 隔一个取一个，获取奇数位置的元素
print(list[3:6])      #结果：[67, 8, 9] 指定切片的开始和结束位置，不包含下标为结束位置的元素
print(list[0:100])      #结果：[3, 4, 5, 67, 8, 9, 12, 99, 17] 切片结束位置大于列表长度时，从列表尾部截断
print(list[100:])      #结果：[] 切片开始位置大于列表长度时，返回空列表

list[len(list):]=[111]
print(list) #在列表尾部增加元素
#结果：[3, 4, 5, 67, 8, 9, 12, 99, 17, 111]

list[:0]=[66,77]
print(list) #在列表头部插入元素
#结果：[66, 77, 3, 4, 5, 67, 8, 9, 12, 99, 17, 111]

list[3:3]=[88]
print(list) #在列表中间插入元素
#结果：[66, 77, 3, 88, 4, 5, 67, 8, 9, 12, 99, 17, 111]

list[:3]=[1,2,3]
print(list) #替换列表元素，等号两边的列表长度相等，会替换相等元素
#结果：[1, 2, 3, 88, 4, 5, 67, 8, 9, 12, 99, 17, 111]

list[3:]=["a","b"]
print(list) #替换列表元素，等号也可不相等，会把所有都替换
#结果：[1, 2, 3, 'a', 'b']

list[::2]=[0]*3
print(list) #隔一个替换一个,如果超出列表的元素个数或少于对应个数，会报错
#结果：[0, 2, 0, 'a', 0]

list[::2]=["h","m","n"]
print(list) #隔一个替换一个,如果超出列表的元素个数或少于对应个数，会报错
#结果：['h', 2, 'm', 'a', 'n']

# list[::2]=["h","m"]
# print(list) #隔一个替换一个,如果超出列表的元素个数或少于对应个数，会报错
#结果：报错

list[:2]=[]
print(list) #删除列表中的2个元素，不包含结束下标的元素
#结果：['m', 'a', 'n']
