"""
多进程
进程是系统中程序执行和资源分配的基本单位，每个进程都有自己的数据段，代码段
和堆栈段

multiprocess  库
跨平台版本的多进程模块，提供了一个process类来代表一个进程对象
"""

from multiprocessing import Process
import time,os

"""
# 子进程需要执行的代码
def run(str):
    while True:
        # os.getpid()  获取进程的id号
        # os.getppid()  获取当前进程的父进程id号
        print("sunck is a %s man--%s--%s"%(str,os.getpid(),os.getppid()))
        time.sleep(1.2)

if __name__ == "__main__":
    print("主进程启动")
    # 创建子进程
    # target说明进程执行的任务
    p = Process(target=run,args=("nice",))
    p.start()
    while True:
        print("sunck is a good man%s"%os.getpid())
        time.sleep(1)
"""


"""父子进程的先后顺序

def run(str):
    print("子进程启动")
    time.sleep(3)
    print("子进程结束")


if __name__ == "__main__":
    print("父进程开始")
    p = Process(target=run,args=("nice",))
    p.start()
    # 父进程的结束不影响子进程，让父进程等子进程结束再执行父进程,使用JOIN
    p.join()
    print("父进程结束")
    # 结果：
    # 父进程开始
    # 子进程启动
    # 子进程结束
    # 父进程结束
"""


"""全局变量在多个进程中不能共享

num = 100

def run():
    print("子进程开始")
    global num    #相当于num = 100
    num += 1
    print("里面的num",num)
    print("子进程结束")


if __name__=="__main__":
    print("父进程开始")
    p = Process(target=run)
    p.start()
    p.join()
    # 子进程中修改全局变量对父进程中的全局变量是没有影响
    # 在创建子进程时对全局变量做了一个备份，父进程中与子进程中的num是
    # 完全不同的两个变量
    print("父进程结束--%d"%num)

    # 结果：
    # 父进程开始
    # 子进程开始
    # 里面的num
    # 101
    # 子进程结束
    # 父进程结束 - -100
"""



"""启动大量子进程"""
from multiprocessing import Pool
import random

def run(name):
    print("子进程启动--%d--%s"%(name,os.getpid()))
    start = time.time()
    time.sleep(random.choice([0.5,1,1.5]))
    end = time.time()
    print("子进程结束--%d--%s---耗时%.2f"%(name,os.getpid(),end-start))


if __name__ == "__main__":
    print("父进程启动")
    # 创建多个进程
    # pool进程池
    # 表示可以同时执行的进程数量，几个核心CPU（内核）就写几个
    pp = Pool(4)
    # 进程数一般要大于进程池的核心数，如果低于就没有意义
    for i in range(6):
        # 创建进程，放入进程池统一管理
        pp.apply_async(run,args=(i,))
    # 注意使用进程池，在调用join之前，必须先调用close，
    # 调用close之后就不能再继续添加新的进程
    pp.close()
    #进程池对象调用join，会等进程池中所有子进程结束完毕再去执行父进程
    pp.join()
    print("父进程结束")

