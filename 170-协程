"""
子程序/函数：在所有语言中都是层级调用，比如A调用B，在B执行的过程中
又可以调用C，C执行完毕返回，B执行完毕返回，最后是A执行完毕，是通过栈实现的
一个线程就是执行一个子程序，子程序调用总是一个入口，一次返回，调用的顺序是明确的

概述：看上去也是子程序，但执行过程中，在子程序的内部中断，转而执行别的
子程序 。不是函数调用。

与线程相比，协程的执行效率极高。因为只有一个线程，也不存在同时写变量的冲突，
在协程中共享资源不加锁，只需判断状态

协程：python对协程的支持是通过generator实现的
"""

def run():
    #空变量是存储的作用，data始终为空
    data = ""
    r = yield data
    print(1,r,data)
    r = yield data
    print(2,r,data)
    r = yield data
    print(3,r,data)
    r = yield data

# 协程的最简单风格，控制函数的阶段执行，节约线程或者进程 的切换
# 返回一个生成器
#
# m = run()
# # 启动m
# print(m.send(None))
# print(m.send("a"))
# print(m.send("b"))
# print(m.send("c"))

# 结果：
# 1 a
# 2 b
# 3 c

"""举例：生产者与消费者"""

def product(c):
    c.send(None)
    for i in range(5):
        print("生产者生产数据%s"%i)
        r = c.send(str(i))
        print("消费者消费了数据 %s"%r)
    c.close()

def customer():
    data = ""
    while True:
        n = yield data
        if not n:
            return
        print("消费者消费%s"%n)
        data = "200"
c = customer()
product(c)
