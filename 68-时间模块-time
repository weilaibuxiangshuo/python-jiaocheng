import time
"""
时间模块
utc(世界协调时间)：格林尼治天文时间，世界标准时间，在中国来说就是utc+8
dst(夏令时）：是一种节约能源而人为规定时间制度，在夏季调快1个小时

时间的表示形式
1.时间戳:以整型或浮字型表示时间的一个以秒为单位的时间间隔，这个时间间隔的基础值是
从1970年1月1日凌晨开始算起。
2.元组：一种python的数据结构表示，这个元组有9个整型内容
year
month
day
hours
minutes
seconds
weekday
julia day
flag(1表示夏令时 或 -1表示根据当前自己判断 或0表示正常）

3.格式化字符串
%y 两位数的年份表示（00-99）
%Y 四位数的年份表示（000-9999）
%m 月份（01-12）
%d 月内中的一天（0-31）
%H 24小时制小时数（0-23）
%I 12小时制小时数（01-12）
%M 分钟数（00=59）
%S 秒（00-59）
%a 本地简化星期名称
%A 本地完整星期名称
%b 本地简化的月份名称
%B 本地完整的月份名称
%c 本地相应的日期表示和时间表示
%j 年内的一天（001-366）
%p 本地A.M.或P.M.的等价符
%U 一年中的星期数（00-53）星期天为星期的开始
%w 星期（0-6），星期天为星期的开始
%W 一年中的星期数（00-53）星期一为星期的开始
%x 本地相应的日期表示
%X 本地相应的时间表示
%Z 当前时区的名称
%% %号本身
"""

#返回格林尼治当前时间的时间戳，浮点数形式，不需要参数
c=time.time()
print(c)
# 结果：1579682664.8909998

#将时间戳转为UTC时间元组
t=time.gmtime(c)
print(t)
# 结果：time.struct_time(tm_year=2020, tm_mon=1, tm_mday=22, tm_hour=8, tm_min=44, tm_sec=24, tm_wday=2, tm_yday=22, tm_isdst=0)

#将时间戳转为本地的时间元组
b=time.localtime(c)
print(b)
# 结果：time.struct_time(tm_year=2020, tm_mon=1, tm_mday=22, tm_hour=16, tm_min=44, tm_sec=24, tm_wday=2, tm_yday=22, tm_isdst=0)

#将本地时间元组转为时间戳
m=time.mktime(b)
print(m)
# 结果：1579682664.0

#将时间元组转成字符串
s=time.asctime(b)
print(s)
# 结果：Wed Jan 22 16:44:24 2020

# 将时间戳转字符串
k=time.ctime(c)
print(k)
# 结果：Wed Jan 22 16:44:24 2020

#将时间元组转换成给定格式的字符串，参数2为时间元组，如果参数2没有指定默认是转当前时间
q=time.strftime("%Y-%m-%d %H:%M:%S",b)
print(q)
# 结果：2020-01-22 16:44:24

#将时间字符串转为时间元组，
w=time.strptime(q,"%Y-%m-%d %H:%M:%S")
print(w)
# 结果：time.struct_time(tm_year=2020, tm_mon=1, tm_mday=22, tm_hour=16, tm_min=44, tm_sec=24, tm_wday=2, tm_yday=22, tm_isdst=-1)

#延迟一个时间，值可以给整型或浮点
# time.sleep(3)

#返回当前程序的cpu执行时间,可以用于性能测试
# unix系统始终返回全部的运行时间
# windows从第二次开始，都是以第一次调用此函数的开始时间戳作为基础
y1=time.perf_counter()
print(y1)
time.sleep(2)
y2=time.perf_counter()
print(y2)
